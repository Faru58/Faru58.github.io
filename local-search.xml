<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>选择排序</title>
    <link href="/2022/05/04/CSharp/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/"/>
    <url>/2022/05/04/CSharp/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<p>2022.5.4</p><span id="more"></span><p><strong>#选择排序</strong></p><p>重点知识点：<br><strong>选择排序</strong><br>1.基本概念： 新建中间商 遍历依次比较找出极值 放入目标位置<br>2.套路写法：两层循环（外层轮数 内层寻找 初始索引 记录极值）<br>3.优化： 已经完成比较的不参与比较  加一个bool标识判断是否已经有序</p><p><strong>#练习题</strong></p><img src="/2022/05/04/CSharp/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/exam.png" class=""><p>以下是答案：</p><div class="code-wrapper"><pre><code class="hljs">using System;namespace Lesson14_选择排序练习题&#123;    internal class Program    &#123;        static void Main(string[] args)        &#123;            Console.WriteLine(&quot;选择排序练习题&quot;);            #region 练习题1               //生成随机数组            Random r = new Random();            int[] arr = new int[20];            for (int i = 0; i &lt; arr.Length; i++)            &#123;                arr[i] = r.Next(0, 101);            &#125;            //选择排序升序排序            Console.WriteLine(&quot;选择排序升序排序结果:&quot;);            for (int m = 0; m &lt; arr.Length; m++)            &#123;                int index = 0;                int temp;                for (int n = 0; n &lt; arr.Length - m; n++)                &#123;                    if (arr[index] &lt; arr[n])                    &#123;                        index = n;                    &#125;                &#125;                if(index != arr.Length - m -1 )                &#123;                    temp = arr[index];                    arr[index] = arr[arr.Length - m - 1];                    arr[arr.Length - m - 1] = temp;                &#125;            &#125;            for (int i = 0; i &lt; arr.Length; i++)            &#123;                Console.Write(arr[i] + &quot; &quot;);            &#125;            //中间间隔            Console.WriteLine();            Console.WriteLine(&quot;*************&quot;);            //冒泡排序降序排序            Console.WriteLine(&quot;选择排序降序排序结果:&quot;);            for (int m = 0; m &lt; arr.Length; m++)            &#123;                int index = 0;                int temp;                for (int n = 0; n &lt; arr.Length - m; n++)                &#123;                    if (arr[index] &gt; arr[n])                    &#123;                        index = n;                    &#125;                &#125;                if (index != arr.Length - m - 1)                &#123;                    temp = arr[index];                    arr[index] = arr[arr.Length - m - 1];                    arr[arr.Length - m - 1] = temp;                &#125;            &#125;            for (int i = 0; i &lt; arr.Length; i++)            &#123;                Console.Write(arr[i] + &quot; &quot;);            &#125;            #endregion        &#125;    &#125;&#125;</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>study</category>
      
      <category>C#</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习笔记</tag>
      
      <tag>C#</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>冒泡排序</title>
    <link href="/2022/05/04/CSharp/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/"/>
    <url>/2022/05/04/CSharp/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<p>2022.5.4</p><span id="more"></span><p><strong>#冒泡排序</strong></p><p>重点知识点：<br><strong>冒泡排序</strong><br>1.基本概念： “无序”数组中两两相邻的数不断比较与交换直到“有序”<br>2.套路写法：两层循环（外层轮数 内层比较 满足则交换）<br>3.优化： 已经完成比较的不参与比较  加一个bool标识判断是否已经有序</p><p><strong>#练习题</strong></p><img src="/2022/05/04/CSharp/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/exam.png" class=""><p>以下是答案：</p><div class="code-wrapper"><pre><code class="hljs">using System;namespace Lesson13_冒泡排序练习题&#123;    internal class Program    &#123;        #region 练习题2        //冒泡排序函数        static void PaiXu( int[] arr, bool upDown)        &#123;            //小优化 在循环外声明变量 可以提高一些性能            bool isSort;            int temp;            for (int m = 0; m &lt; arr.Length; m++)            &#123;                isSort = false;                for (int n = 0; n &lt; arr.Length - 1 - m; n++)                &#123;                    if(upDown)                    &#123;                        if (arr[n] &gt; arr[n + 1])                        &#123;                            isSort = true;                            temp = arr[n];                            arr[n] = arr[n + 1];                            arr[n + 1] = temp;                        &#125;                    &#125;                    else                    &#123;                        if (arr[n] &lt; arr[n + 1])                        &#123;                            isSort = true;                            temp = arr[n];                            arr[n] = arr[n + 1];                            arr[n + 1] = temp;                        &#125;                    &#125;                &#125;                if (!isSort)                &#123;                    break;                &#125;            &#125;            if (upDown)            &#123;                Console.WriteLine(&quot;冒泡排序升序排序结果:&quot;);            &#125;            else            &#123;                Console.WriteLine(&quot;冒泡排序降序排序结果:&quot;);            &#125;            for (int i = 0; i &lt; arr.Length; i++)            &#123;                            Console.Write(arr[i] + &quot; &quot;);            &#125;        &#125;        #endregion        static void Main(string[] args)        &#123;            Console.WriteLine(&quot;冒泡排序练习题&quot;);            #region 练习题1            //判断是否已经有序 标识符            bool isSort = false;            //生成随机数组            Random r = new Random();            int[] arr1 = new int[20];            for (int i = 0; i &lt; arr1.Length; i++)            &#123;                arr1[i] = r.Next(0, 101);            &#125;            //冒泡排序升序排序            Console.WriteLine(&quot;冒泡排序升序排序结果:&quot;);            for(int m = 0; m &lt; arr1.Length; m++)            &#123;                isSort = false;                for(int n = 0; n &lt; arr1.Length - 1 - m; n++)                &#123;                    if(arr1[n] &gt; arr1[n + 1])                    &#123;                        isSort = true;                        int temp = arr1[n];                        arr1[n] = arr1[n + 1];                        arr1[n + 1] = temp;                    &#125;                &#125;                if( !isSort )                &#123;                    break;                &#125;            &#125;            for(int i = 0; i &lt; arr1.Length; i++)            &#123;                Console.Write(arr1[i] + &quot; &quot;);            &#125;            //中间间隔            Console.WriteLine();            Console.WriteLine(&quot;*************&quot;);            //冒泡排序降序排序            Console.WriteLine(&quot;冒泡排序降序排序结果:&quot;);            for (int m = 0; m &lt; arr1.Length; m++)            &#123;                isSort = false;                for (int n = 0; n &lt; arr1.Length - 1 - m; n++)                &#123;                    if (arr1[n] &lt; arr1[n + 1])                    &#123;                        isSort = true;                        int temp = arr1[n];                        arr1[n] = arr1[n + 1];                        arr1[n + 1] = temp;                    &#125;                &#125;                if (!isSort)                &#123;                    break;                &#125;            &#125;            for (int i = 0; i &lt; arr1.Length; i++)            &#123;                Console.Write(arr1[i] + &quot; &quot;);            &#125;            #endregion            //中间间隔            Console.WriteLine();            Console.WriteLine(&quot;*************&quot;);            #region 练习题2            //生成数组            int[] arr2 = new int[20];            for (int i = 0; i &lt; arr2.Length; i++)            &#123;                arr2[i] = r.Next(0, 101);            &#125;            //true代表升序排序 false代表降序排序            PaiXu( arr2, true);            //中间间隔            Console.WriteLine();            Console.WriteLine(&quot;*************&quot;);            PaiXu( arr2, false);            #endregion        &#125;    &#125;&#125;</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>study</category>
      
      <category>C#</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习笔记</tag>
      
      <tag>C#</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2022年5月4日</title>
    <link href="/2022/05/04/%E6%97%A5%E8%AE%B0/2022%E5%B9%B45%E6%9C%884%E6%97%A5/"/>
    <url>/2022/05/04/%E6%97%A5%E8%AE%B0/2022%E5%B9%B45%E6%9C%884%E6%97%A5/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="速爬." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="7534e47023136be9194c18eb9f1c6b6b277fbdb5e67f276a7a24e964121d9ede">a03af1012de36d86e65bfb0d51f6ff10a85bce09851f2195bb4f8fea8640a11f4fdfb5404fa16976a85f9e43e1af13b39ced62e64f813af077b9d08f855549bb693c94260630e851cfc5c04e68c527e3a17450c87ce76f6fdb2ef43a55797a7777cff256c4d0f9d6b99ad44db2b90417d46eab1db55e0489a309b13ad08a065336d8ba80d6bceb2234392ea6a1d2aa59016ed4de0f729dd0a66b15e0e6295bcb7993ecdcb8a0e37716a1bc81c0581f7ea83a7916b2faf6b3357abf5c6297ab29a1d8b8ae6bbe76d3727289f77e70db1912b12025f60a623afb3858620ac7a37d4528819ecea311b85f02e0e41336cf4fd7dd76e1a45d5768c2a26ee3e1b6b33ad0a0f5bb14841897d62af8fed3c91fe5b0360d8d0822335b213a54da95611233085af226ae6f4691997105f0c7f84ded1992f0863bf98df173d77e498db0b73d2f527e0d398a64b3c7e0fb7bc04b95e349138f1c16c15cc2da415fb3c0c51e86542d5942d124f02003374da4d9fe80761b24341778593d77fa1e3dea6b88b07a47bb6159d05ecf4b5df6e47efbe59e1c773b15af23525ff00d12014253b60ad3e6303ebf27382ba5777003119af9c0b4c7367c8837255f778d920087a8f4920b11ae07f82a190a66ba53ac3248de50b476378f0a5f8041b92ba3f8d0e1603cd47225b022a6942091e0d498619a979402f675213cda6fbd65bc31d6e72ce46984a7d2a4dc336d6ac942edef3aae22d1c74ddda4c88a34e8f609d95061d35861f539623e1818033ba8b5f3a5249bdaac5e961ea1e79aeafca5d7db1a72f2d7645a7acf41d8728cf4c94263b575d7cc8d4d5e59aee42a920597dab6c1fa0948af8414d09204dfd842bff0ca37fe263f2f72b066175b78970ce1fdee2a52215f207e426f1ea3d5cd3d7f29336792bb1378fc5c944ed94de376705e804481b9ab7a101dd9d7fa749d10a0d19a81772aee0f4211d9e1fdd886311157c618362f22d44bd1554e9421d450218d1dc2fdbc3d857bb2aa8f4d083f573fbfa407b40e62e92520f7cf5acdd9311775d67b9616e1ac75af4d9f05246df9485f608341437ddb0e</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">要密码，快滚.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>Diary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>随笔</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2022年5月3日</title>
    <link href="/2022/05/04/%E6%97%A5%E8%AE%B0/2022%E5%B9%B45%E6%9C%883%E6%97%A5/"/>
    <url>/2022/05/04/%E6%97%A5%E8%AE%B0/2022%E5%B9%B45%E6%9C%883%E6%97%A5/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="速爬." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="5ad2faf327600fd99b9a76bd83692a73a783584bcada3bfb6cbd710c6c2675d0">a03af1012de36d86e65bfb0d51f6ff10e1a73159dd7d9bc24f0c90cd0c78f17d3958934a94758bfab6b1da7762916424fe3ab133f6127ed7022fdf0e122be9270293cdefc6c672a8e3338f0ca789462e8ccdff0b5dd845ef7d270cdbb3f85ed19d2bc2eda1a882e655081135800582d5d12dec71810a02ab45ec07307c92a3846a5bba28c7a16ec8856271928e8e83eb87a74ae56023474d7e626ad4a25febe888d36cb0e6865b260d6af31194084f5eae07559ffedd729487634b0609ba6e6683e61d1219527fc6c8e1e88354db161dc8b0450a981172c2be50b32902fdfd47fce9cbacf47c458e9f4b047eafded69c5c0456c2f3c67cc16b652a3625fc12367b53ef2cc6a876584ab6dbea13ae15d408a5ba0486e8e0dbc328124cd968bcf9268de3432a36edd3229c87fb6a03dbf22f4282633e5f6f2b60532740457a7d2f0da4e7957bba5fa7ee65f35fb258ff11a16204255dd169ce1568fd03a35794cf5a3bbd68899f2d6c236707255cdd126a25b8f0c6aa9b73264bc00d9eb3bf7f8571cea0a07cbc651f9d46a60a1ff8b1cf2d6012908184c69fc55ff58120234dab22e0d91d338903a8dfc338eccd26719f8bf08175069b06b42095e864c00788fc6658ef9ccc19b10f9d274d8fe05d0d0c3ff6a3cb783a3a6dcb0316d0142909cf8628be97c7f1b3b44244970cb41f40343c24a56e70ced75bd044d6ed278c7ab394f10048cb0d2be369b58572b4b9b3e3344cad66b40b27d1877349d3ea12b2bb1ac67d750580705cc64e71eb539aacd1a8b55e899a935ef10f589a6c0fd2c9ab</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">要密码，快滚.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>Diary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>随笔</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>结构体</title>
    <link href="/2022/05/03/CSharp/%E7%BB%93%E6%9E%84%E4%BD%93/"/>
    <url>/2022/05/03/CSharp/%E7%BB%93%E6%9E%84%E4%BD%93/</url>
    
    <content type="html"><![CDATA[<p>2022.5.3</p><span id="more"></span><p><strong>#结构体</strong></p><p>重点知识点：<br><strong>结构体</strong><br>1.概念： 结构体 struct 是变量和函数的集合 用来表示特定的数据集合<br>2.访问修饰符：用来修饰变量和方法  public-&gt;外部可以调用   private-&gt;只能内部调用   不写默认private<br>3.构造函数：没有返回值 函数名和结构体名相同 可以重载 主要是帮助我们快速初始化结构体对象</p><p>注意：<br>1.在结构体中声明的变量不能初始化  只能在外部或者函数中赋值（初始化）<br>2.在结构体中声明的函数 不用加static</p><p><strong>#练习题</strong></p><img src="/2022/05/03/CSharp/%E7%BB%93%E6%9E%84%E4%BD%93/exam.png" class=""><p>以下是答案：</p><div class="code-wrapper"><pre><code class="hljs">using System;namespace Lesson12_结构体练习题&#123;    #region 练习题1    struct Student    &#123;               public string name;        public bool sex;        public int age;        public int lesson;        public string major;        public Student(string name, bool sex, int age, int lesson, string major)        &#123;            this.name = name;                       this.sex = sex;            this.age = age;            this.lesson = lesson;            this.major = major;        &#125;        public void Information()        &#123;            Console.WriteLine(&quot;学员姓名&#123;0&#125;,性别&#123;1&#125;,年龄&#123;2&#125;,班级&#123;3&#125;,专业&#123;4&#125;&quot;, name, age, age, lesson, major);        &#125;    &#125;    #endregion    #region 练习题2    //他们都是访问修饰符 用来修饰变量和方法    //private 只能内部调用    //public  外部可以调用    #endregion    #region 练习题3    struct Rectangular    &#123;        public int x;        public int y;        public Rectangular(int x, int y)        &#123;            this.x = x;            this.y = y;        &#125;        public void Information()        &#123;            Console.WriteLine(&quot;矩形的长为&#123;0&#125;,宽为&#123;1&#125;,面积为&#123;2&#125;,周长为&#123;3&#125;&quot;, x, y, x * y, 2 *(x + y));        &#125;    &#125;    #endregion    #region 练习题4    struct PlayerInfo    &#123;        public string name;        public E_Occupation occupation;                public PlayerInfo(string name, E_Occupation occupation)        &#123;            this.name = name;            this.occupation = occupation;                &#125;        public void AttackInformation()        &#123;            string o = &quot;&quot;;            string s = &quot;&quot;;            switch (occupation)            &#123;                case E_Occupation.Warrior:                    o = &quot;战士&quot;;                    s = &quot;冲锋&quot;;                    break;                case E_Occupation.Hunter:                    o = &quot;猎人&quot;;                    s = &quot;假死&quot;;                    break;                case E_Occupation.Witch:                    o = &quot;法师&quot;;                    s = &quot;奥术冲击&quot;;                    break;            &#125;            Console.WriteLine(&quot;&#123;0&#125;&#123;1&#125;施放了&#123;2&#125;&quot;, o, name, s);        &#125;    &#125;    enum E_Occupation    &#123;        Warrior,        Hunter,        Witch,    &#125;    #endregion    #region 练习题5    struct Monster    &#123;        public string name;        public int atk;        public Monster(string name)        &#123;            this.name = name;            Random r = new Random();            atk = r.Next( 10, 30 );        &#125;        public void Atk()        &#123;            Console.WriteLine(&quot;&#123;0&#125;的攻击力是&#123;1&#125;&quot;, name, atk);        &#125;    &#125;    #endregion    #region 练习题7    struct UltraMan    &#123;        public string name;        public int atk;        public int def;        public int hp;        public UltraMan(string name, int atk, int def, int hp)        &#123;            this.name = name;            this.atk = atk;            this.def = def;            this.hp = hp;                   &#125;        //结构体是值类型 想要在函数内部改变值类型信息 外部受影响 一定要用ref或out        public void Attack(ref Boss monster)        &#123;            //奥特曼打怪兽的逻辑            monster.hp -= atk - monster.def;            Console.WriteLine(&quot;&#123;0&#125;攻击了&#123;1&#125;，造成了&#123;2&#125;点伤害，&#123;1&#125;剩余血量&#123;3&#125;&quot;, name, monster.name, atk - monster.def, monster.hp);        &#125;    &#125;    struct Boss    &#123;        public string name;        public int atk;        public int def;        public int hp;        public Boss(string name, int atk, int def, int hp)        &#123;            this.name = name;            this.atk = atk;            this.def = def;            this.hp = hp;        &#125;        public void Attack(ref UltraMan Tiga)        &#123;            //怪兽打奥特曼的逻辑            Tiga.hp -= atk - Tiga.def;            Console.WriteLine(&quot;&#123;0&#125;攻击了&#123;1&#125;，造成了&#123;2&#125;点伤害，&#123;1&#125;剩余血量&#123;3&#125;&quot;, name, Tiga.name, atk - Tiga.def, Tiga.hp);        &#125;    &#125;    #endregion    internal class Program    &#123;                        static void Main(string[] args)        &#123;            Console.WriteLine(&quot;结构体练习题&quot;);            #region 练习题1            Student s1 = new Student(&quot;季宝&quot;, true, 23, 2, &quot;微电子&quot;);            Student s2 = new Student(&quot;大逼&quot;, true, 23, 2, &quot;网安&quot;);            s1.Information();            s2.Information();            #endregion            #region 练习题3            Rectangular r1 = new Rectangular (5, 4);            r1.Information();            #endregion            #region 练习题4            Console.Write(&quot;请输入玩家名字：&quot;);            string name = Console.ReadLine();            Console.Write(&quot;请选择你的职业：（0战士，1猎人，2法师）&quot;);            try             &#123;                E_Occupation o = (E_Occupation)int.Parse(Console.ReadLine());                PlayerInfo p1 = new PlayerInfo(name ,o);                p1.AttackInformation();            &#125;            catch            &#123;                Console.WriteLine(&quot;请输入数字&quot;);            &#125;            #endregion            #region 练习题6            //声明Monster数组            Monster[] monsters = new Monster[10];            for (int i = 0; i &lt; monsters.Length; i++)            &#123;                monsters[i] = new Monster(&quot;怪兽&quot; + i);                monsters[i].Atk();            &#125;            #endregion            #region 练习题7            UltraMan Tiga = new UltraMan(&quot;迪迦&quot;, 10, 5, 100);            Boss boss = new Boss(&quot;哥斯拉&quot;, 8, 4, 100);            while(true)            &#123;                Tiga.Attack(ref boss);                if( boss.hp &lt;= 0)                &#123;                    Console.WriteLine(&quot;迪迦胜利&quot;);                    break;                &#125;                boss.Attack(ref Tiga);                if (Tiga.hp &lt;= 0)                &#123;                    Console.WriteLine(&quot;哥斯拉胜利&quot;);                    break;                &#125;                Console.WriteLine(&quot;按任意键继续&quot;);                Console.ReadKey(true);            &#125;            #endregion        &#125;    &#125;&#125;</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>study</category>
      
      <category>C#</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习笔记</tag>
      
      <tag>C#</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>递归函数</title>
    <link href="/2022/05/03/CSharp/%E9%80%92%E5%BD%92%E5%87%BD%E6%95%B0/"/>
    <url>/2022/05/03/CSharp/%E9%80%92%E5%BD%92%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<p>2022.5.3</p><span id="more"></span><p><strong>#递归函数</strong></p><p>重点知识点：<br><strong>递归函数</strong><br>概念： 让函数自己调用自己<br>注意：<br>一个正确的递归函数<br>1.必须有结束调用的条件<br>2.用于条件判断的 这个条件必须改变 能够打到停止的目的</p><p><strong>#练习题</strong></p><img src="/2022/05/03/CSharp/%E9%80%92%E5%BD%92%E5%87%BD%E6%95%B0/exam.png" class=""><p>using System;</p><p>namespace Lesson11_递归函数练习题<br>{<br>    internal class Program<br>    {<br>        #region 练习题1<br>        static void ZeroTen(int a)<br>        {<br>            if(a &gt; 10)<br>            {<br>                return;<br>            }<br>            Console.WriteLine(a);<br>            ZeroTen(++a);<br>        }</p><div class="code-wrapper"><pre><code class="hljs">    #endregion    #region 练习题2    static int Factorial(int a)    &#123;        if(a == 1)        &#123;            return 1;        &#125;        return a * Factorial(--a);//--a应写在后面, 或用a - 1        //若是 Factorial(--a) * a ,后面的a是已经减掉的a,得不到正确结果    &#125;    #endregion    #region 练习题3    static long SumFactorial(int a)    &#123;        if(a == 1)        &#123;            return 1;        &#125;        return Factorial(a) + SumFactorial(--a);    &#125;    #endregion    #region 练习题4    //自己写的    static double ZhuganLength1(int a)    &#123;        if(a == 0)        &#123;            return 100;        &#125;        return 0.5 * ZhuganLength1(--a);    &#125;    //答案    //一是长度 二是天数    static void ZhuganLength2(double length, int day = 0)    &#123;        length /= 2;        ++day;        //第十天砍了后的长度        if (day == 10)        &#123;            Console.WriteLine(&quot;第十天砍后竹竿长&#123;0&#125;米&quot;, length);            return;        &#125;                    ZhuganLength2(length, day);    &#125;    #endregion    #region 练习题5    //看答案的 想不出来短路怎么写    static bool PrintNum(int a)    &#123;        Console.WriteLine(a);                   return a == 200 || PrintNum(a + 1);         //逻辑短路，若逻辑或前面的为真，不执行逻辑或后面的    &#125;        #endregion    static void Main(string[] args)    &#123;        Console.WriteLine(&quot;递归函数练习题&quot;);        //ZeroTen(0);        Console.WriteLine(Factorial(5));        Console.WriteLine(SumFactorial(10));        Console.WriteLine(ZhuganLength1(10));        ZhuganLength2(100, 0);        PrintNum(1);    &#125;&#125;</code></pre></div><p>}</p>]]></content>
    
    
    <categories>
      
      <category>study</category>
      
      <category>C#</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习笔记</tag>
      
      <tag>C#</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>游戏设想(更新中)</title>
    <link href="/2022/05/03/%E9%A1%B9%E7%9B%AE/%E6%B8%B8%E6%88%8F%E8%AE%BE%E6%83%B3-%E6%9B%B4%E6%96%B0%E4%B8%AD/"/>
    <url>/2022/05/03/%E9%A1%B9%E7%9B%AE/%E6%B8%B8%E6%88%8F%E8%AE%BE%E6%83%B3-%E6%9B%B4%E6%96%B0%E4%B8%AD/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="速爬." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="908637e7da72741cbf1926a34d715c3f1b3197e17f305f66c59522248d0ad023">1432a7b75e994fca526a11f4c4c29edb5d95ddd08071f06d8e2b1881f40addc49717d4ad2129bf03f288d888dddd593047eece5bda476a758cc60ea414b92c2fde57109810737be6114d7bc1b6b7562288492faa485ce10d9f6299e57b851357b155e4efdd34cbdd97c62497dc707a8984ec16459a2b29863b8efb819d6be55fee9506e4cffd6a89bbbd6344b2f51a0b1deb0385f3209dfde7e16b2730acd43ef49c7653d1401cc12f99952648c7e9fac2e3d036f71ac2a224d882c9eb52b53e8ce41ad4adcb845a1ece03152a88f6b9b4a60f385b7cd2bb197f64876a288ef21ea0f1cd6c1413b5bb87c41430ede2ee3757bf646cb9be07686a61467b31f274ec251a3402c81ab754e4f64b4371f59d3e48b066a9d4374932d26748038e8972751dbd5ccf58182e5c1ffdd89532c2b4d16f4e9e2f1d2ca1aff8bf2b9f1a02ec8cb9b08156183203b1e6d5d9e33805bdfdcf86d2d455b22f3cf0c5256eeeba4ecd62b87719f83f61c86654cd68f2d2cca26593c99c9d37ac15226c4abb48fd006cebb943c3977b2e1e46f10646380aed592825f2f183df4476ec6f707913e8fe6a35b06bd8927f2e8b8d68c9888072cd26ee912085b9b25583c72c02c80aaabfb40c84e2827f827bbb776801015e8a8b1b14415943af570837ddc4cc5b600beb1ff5c31b1d5ea7a7354b6d1b199aa5d8b9454d21cf6afcdf2ea342ab7096928103d344fd1bdd712daa98221022d412ebc902d7a439a0b343ed6b85ea59b7e373c0fef8b54b50f4fc2a26cf4ada4c60ec12a43e63ad2d274d647dc1d06be9d42db680a8cd4a116a33b3995c1fd526bbc5db2877bfdc0c2e3b97b5368984176418029830b18956df82a84ece311b4455a029c4aa17ed7771b0d7268ea553d4bbfb</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">要密码，快滚.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>project</category>
      
    </categories>
    
    
    <tags>
      
      <tag>游戏</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>函数重载</title>
    <link href="/2022/05/03/CSharp/%E5%87%BD%E6%95%B0%E9%87%8D%E8%BD%BD/"/>
    <url>/2022/05/03/CSharp/%E5%87%BD%E6%95%B0%E9%87%8D%E8%BD%BD/</url>
    
    <content type="html"><![CDATA[<p>2022.5.2</p><span id="more"></span><p><strong>#函数重载</strong></p><p>重点知识点：<br><strong>函数重载</strong><br>概念： 同一个语句块中，函数名相同，参数数量、类型、顺序不同的函数 就称为函数重载<br>注意： 和返回值无关<br>作用： 一般用来处理不同参数的同一类型的逻辑处理</p><p><strong>#练习题</strong></p><img src="/2022/05/03/CSharp/%E5%87%BD%E6%95%B0%E9%87%8D%E8%BD%BD/exam.jpg" class=""><p>以下是答案：</p><div class="code-wrapper"><pre><code class="hljs">using System;namespace Lesson10_函数重载练习题&#123;    internal class Program    &#123;        #region 练习题1        static int CompareNum(int a, int b)        &#123;            return a &gt; b ? a : b;        &#125;        static float CompareNum(float a, float b)        &#123;            return a &gt; b ? a : b;        &#125;        static double CompareNum(double a, double b)        &#123;            return a &gt; b ? a : b;        &#125;        #endregion        #region 练习题2        static int CompareArray(int[] arr)        &#123;            int max = arr[0];            for (int i = 1; i &lt; arr.Length; i++)            &#123;                if (arr[i] &gt; max)                    max = arr[i];            &#125;            return max;        &#125;        static float CompareArray(float[] arr)        &#123;            float max = arr[0];            for (int i = 1; i &lt; arr.Length; i++)            &#123;               if (arr[i] &gt; max)                   max = arr[i];            &#125;            return max;        &#125;        static double CompareArray(double[] arr)        &#123;            double max = arr[0];            for (int i = 1; i &lt; arr.Length; i++)            &#123;                f (arr[i] &gt; max)                   max = arr[i];            &#125;            return max;        &#125;        #endregion        static void Main(string[] args)        &#123;            Console.WriteLine(&quot;函数重载练习题&quot;);            #region 练习题1            Console.WriteLine(CompareNum(5, 7));            Console.WriteLine(CompareNum(10.9f, 4.5f));            Console.WriteLine(CompareNum(20.975, 100.45));            #endregion            #region 练习题2            int[] arrInt = &#123; 1, 4, 5, 8, 6 &#125;;            Console.WriteLine(CompareArray(arrInt));            float[] arrFloat = &#123; 2.1f, 4.5f, 5.9f, 8.1f, 5.8f &#125;;            Console.WriteLine(CompareArray(arrFloat));            double[] arrDouble = &#123; 1.2, 4.5, 5.8, 8.4, 6.6, 8.5 &#125;;            Console.WriteLine(CompareArray(arrDouble));            #endregion        &#125;    &#125;&#125;</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>study</category>
      
      <category>C#</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习笔记</tag>
      
      <tag>C#</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2022年5月2日</title>
    <link href="/2022/05/02/%E6%97%A5%E8%AE%B0/2022%E5%B9%B45%E6%9C%882%E6%97%A5/"/>
    <url>/2022/05/02/%E6%97%A5%E8%AE%B0/2022%E5%B9%B45%E6%9C%882%E6%97%A5/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="速爬." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="491f82e74d100b7c0ea7a128893e0938270b929bd3c36f691cdf1082d62df28d">a03af1012de36d86e65bfb0d51f6ff10488d28acf4ffb3e9d40e31ff66292b18d63fe0d726a396877e15d0f45ea8c4d0fca64270b3af481bbf674539be9d74ef68c82a089e06187f209c1d9148866c6889149615508e1920a0ba4dfede99cd4f1c78d484984659bc16451c78231727151c61eb8e511e88202c667f6492a364b4675af00dab110af61f89478fb7bf1e08ab42759f2346284503e36031ddd429d25b0534f43dda5bdafe4e506c1c70035c6cadad563a3c2357e939054059579347b9934247a362a556c365ea249a8dc505ce1d6d8ca02cfccd72b2a108d0eb68d21f51ea413ffdda474e96f5fc9814f7bcc309066ecda23a2402bfb054e09fd25585ec506d740893f0a92fefe328df54c6c5e30ccee78c493458af915a8bd62d591845f1826a4e9bb303d3f4ffa2a0a630ea2eeca8a0aa24bf1fac84529eca1eca00b428e66ee56674f67df6893fb3b6638bf6072f6e9a9070d033dbce154ec5f4f8cf9a7a4f71745f97e5632413ce634d8752541d453cc1f8efc43cb6e55f4f5387885b68fb16745bbfeab5b3f794bfcf28fa185ee8184906a049f0af8ad88ad4f440aa03d10017a143f7f5d6205e3de25d9d59cfa3851b9f2e81f5696c8a2a346b46a76c157a9c2ec305a56e0d7731f4171170433961c676df299d8c595faf5781699895fd001cb183f0542a53f04e059eb4aa707eb1ebec51596a61e4214457d3198eed0cd1c0fe925ad8fc6bcd34e0e0461ee7011d206c6498b0d22654c77579c9cad6d84edd07b81589b80dead8c40e53fffe3640728be6c57f1adecc1adae8789b3531cecd41f4e7f4fdba0c51531d5582c3f825cc4baf81d38a72ab443582fd97b24a4ac9d6c1678f5112c39bfa42e025e83c92e477964c88db0c102230ac7f4629e91dcb511bb7ade9fd16c786601f7194bf912cbed763641345d003c7f4b338765e3cdddfa403c98b5c030f06481f4598c8aa5a297abeb1492047cf5ad3c8496b451b942ff3336266c3b224372060d667f3d6346ba3004f5b9a598335fbc69ab72aa78c648cbf86d34d7d87a21e3675b42c696d20f83b50d8dc483eaa7a111f3b1534d4e39bc38e09196cc7d43fa342fa1233c4f07e63b8a1b464e3d7e0129d364e1556e6087b43e6dced704a2f793fe41e9f717c15c74c85b78c76b947e4ce7bb47e343b6ac8217d74f905bbdf1fee49a8beb58026eb33f2767416d12bc9838b2d1f102cbd24687614dd3a6e17f1367e92340e9641400d3882c9cd747a9447b4ccf8ebb10700132e285d8abc7b51413191a46b696898772325468360fef28752ae0335b0cff4d8aa52466cfc1ce30fd9ee0f7636af2696c47d23e8c8cdeddd2c9d3909f2e3f8d8538a1c26a9fb47e56892a3d0d4e1c9ceb9112a9dca53101795505354efe7a809cb4af82ea138c98c207b9900c5c9ed067cc8f724ee174489e410bb86821f0862bae558c20657a113c556316f8222ff65e9859371f0cf0c759ecf953da0cda9f4b302962e44</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">要密码，快滚.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>Diary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>随笔</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>变长参数和参数默认值</title>
    <link href="/2022/05/02/CSharp/%E5%8F%98%E9%95%BF%E5%8F%82%E6%95%B0%E5%92%8C%E5%8F%82%E6%95%B0%E9%BB%98%E8%AE%A4%E5%80%BC/"/>
    <url>/2022/05/02/CSharp/%E5%8F%98%E9%95%BF%E5%8F%82%E6%95%B0%E5%92%8C%E5%8F%82%E6%95%B0%E9%BB%98%E8%AE%A4%E5%80%BC/</url>
    
    <content type="html"><![CDATA[<p>2022.5.2</p><span id="more"></span><p><strong>#变长参数和参数默认值</strong></p><p>重点知识点：<br><strong>1 变长参数关键字 params</strong><br>作用： 可以传入n个同类型参数 n可以是0<br>注意：<br>    1.params 后面必须是数组 意味着只能是同一类型的可变参数<br>    2.变长参数只能有一个<br>    3.必须在所有参数后面写变长参数</p><p><strong>2 参数默认值（可选参数）</strong><br>作用：可以给参数默认值 使用时可以不传参 不传用默认的 传了用传的<br>注意：<br>    1.可选参数可以有多个<br>    2.正常参数必须写在可选参数前面，可选参数只能写在所有参数的后面</p><p><strong>#练习题</strong></p><img src="/2022/05/02/CSharp/%E5%8F%98%E9%95%BF%E5%8F%82%E6%95%B0%E5%92%8C%E5%8F%82%E6%95%B0%E9%BB%98%E8%AE%A4%E5%80%BC/exam.jpg" class=""><p>以下是答案：</p><div class="code-wrapper"><pre><code class="hljs">using System;namespace Lesson9_变长参数和参数默认值练习题&#123;    internal class Program    &#123;        #region 练习题1        static void SumAndAvg(params int[] arr)        &#123;            int sum = 0;            for (int i = 0; i &lt; arr.Length; i++)            &#123;                sum += arr[i];            &#125;            double avg = sum / (double)arr.Length;            Console.WriteLine(&quot;它们的和为&#123;0&#125;,平均数为&#123;1&#125;&quot;, sum, avg);        &#125;        #endregion        #region 练习题2        static void OddEven(params int[] arr)        &#123;            int odd = 0, even = 0;            for (int i = 0; i &lt; arr.Length; i++)            &#123;                if(arr[i] % 2 == 0)                &#123;                    even += arr[i];                &#125;                else                &#123;                    odd += arr[i];                &#125;            &#125;            Console.WriteLine(&quot;奇数和为&#123;0&#125;,偶数和为&#123;1&#125;&quot;, odd, even);        &#125;        #endregion        static void Main(string[] args)        &#123;            Console.WriteLine(&quot;变长参数和参数默认值练习题&quot;);            #region 练习题1            SumAndAvg(5, 9, 11, 52);            #endregion            #region 练习题2            OddEven(10, 11, 12);            #endregion        &#125;&#125;</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>study</category>
      
      <category>C#</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习笔记</tag>
      
      <tag>C#</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ref和out</title>
    <link href="/2022/05/02/CSharp/ref%E5%92%8Cout/"/>
    <url>/2022/05/02/CSharp/ref%E5%92%8Cout/</url>
    
    <content type="html"><![CDATA[<p>2022.5.1</p><span id="more"></span><p>#ref和out</p><p>重点知识点：<br>1.ref和out的作用: 解决值类型和引用类型 在函数内部 改值 或者 重新声明 能够影响外部传入的变量 让其也被修改<br>2.使用上: 就是在声明参数的时候 前面加上ref和out的 关键字即可 使用时同上<br>3.区别：<br> 1.ref传入的变量必须初始化  out不用<br> 2.out传入的变量必须在内部赋值  ref不用</p><p>#练习题</p><img src="/2022/05/02/CSharp/ref%E5%92%8Cout/exam.jpg" class=""><p>以下是答案：</p><div class="code-wrapper"><pre><code class="hljs">static bool Login(int user, int key, ref string info)    &#123;        if(user == 0)        &#123;            //用户名正确的逻辑            if(key == 0)            &#123;                //用户名正确且密码正确的逻辑                info = &quot;登录成功&quot;;            &#125;            else            &#123;                //密码错误的逻辑                info = &quot;密码错误&quot;;                return false;            &#125;        &#125;        else        &#123;            //用户名错误的逻辑            info = &quot;用户名错误&quot;;            return false;        &#125;               return true;    &#125;static void Main(string[] args)    &#123;        Console.WriteLine(&quot;请输入用户名和密码&quot;);            int user = int.Parse(Console.ReadLine());            int key = int.Parse(Console.ReadLine());            string info = &quot;&quot;; //ref需要初始化            while (!Login(user, key, ref info)) //若登录失败继续尝试            &#123;                Console.WriteLine(info); //登录失败直接进入循环 打印登陆失败                Console.WriteLine(&quot;请输入用户名和密码&quot;);                user = int.Parse(Console.ReadLine()); //不需要再声明                key = int.Parse(Console.ReadLine());            &#125;            Console.WriteLine(info);    &#125;</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>study</category>
      
      <category>C#</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习笔记</tag>
      
      <tag>C#</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2022年5月1日</title>
    <link href="/2022/05/01/%E6%97%A5%E8%AE%B0/2022%E5%B9%B45%E6%9C%881%E6%97%A5/"/>
    <url>/2022/05/01/%E6%97%A5%E8%AE%B0/2022%E5%B9%B45%E6%9C%881%E6%97%A5/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="速爬." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="8231443e481bad21d3be8c11f026cef33b9d2ec10d2c75db8a6a3fc9353e6db7">a03af1012de36d86e65bfb0d51f6ff1082829027e374e7685fe9ab85e3524a611ae1849435e4e7a720cff75f6e0c69420b45613e2699125232dbe72ca80048bebea598f361ba86018511cca15b95988dc0cfaef36e0d9831c314d5a5c0c42027b37202a638339207f929734f64e08597cbddc5ea522252e2e02962224d8f2610c567a9905f51b07d0b9ecc25ce9b92d845f910467ef77166d775f3ecd0d5e21bf953b08187237aa313add55b1c228dd7d053f127c9a6a47c0c5a7938ac994063ac4002df1fa06e05aafb90d8bc2640f6cd006d7ed7c8863170e64e1bd6245c77b0fa8e735e224b950e1f54e78b0133b701d1403fb2cfdf2d386b43e9fbaa1451076e4191f3d354e3fffc715fac93c09b38122dd8cb11d8342dc0c89192430adca4b08219e517801151b2a0f8c9d9db1c25359477c00a5f8a9d1f4dde7f15395f067821cdc6c518b824eb6db732a6f9509e2879bd5d893c34ef5dd9fb4feedd57143b5d8aaf6a95442b8ceaff1b20ed7a0103ef67d68f97923d95e97146672a06d3dbddf62d8d0308409f487798bfb2890628acb6da93b261a2be6b203fc5941ccf4602858ff06456f1cd8549bb19df0507e01adc30cf1edc3cf2ec7b1df2a01b64cbd75040011043907e573076bddaa0b8a1fd0278e802bee90f5473a88a8c185022aba3ed8be34c76a5f6841409c505a1b3068b32090cb5b1185e0bf33fc4b5a25b6b0dd4bbf90f8dbe9dcd98b38b25733197162851b604f16a5d7772dc986f3421c043d218bb4333b43d9982b085bbab19f29923bf644069879a756156a5ec5b6d9ac660e35e9544558afb91261123bcc30f7e00c6a468fe4f57c4a11fc966a618fc6f22037b00a3579d3f3ed4935bf7fa8ea29659083c3065e01531f9ca0aa7c185eb275f06844f98e1d86241cec7c6516f3c1490ef92db64b4894aa8b258b0ba055d641c53dbc0ac122fcf5d310d795b7943c3d1894ebd7906d91214d99dddb8546ee1ffc8f85958f09c8cde59fe895fc0b50b36ec620446c4ddc9685f8caccdebeca493bfe948808fb00921585db583e011fd37c3d175b970b75715e00d4b7e12ec96c492a95b96e523bb5e176bb0f49b3ff8ca86fdb500a752bda74eee760803b291021a3b9f0126cd7bb23dd1e72f470659f85b746c63aacba02862c6854f0b1ed71aad37a7828628896f1d5102453015e7769e691b07182728455dafcbc3e954aac72ef8a611d29a2392426ab51e80c901b6d0f46356365fa9660c731b71e7105a4a38d26fbffc6e804be1de7dafd2888b15a688c5d0b44b925821bb280a6ad0b3e82e48cec923663f4c22edb27946f90144f4df62e0c193bfa4186c0436989434570289d5a8a70a5823b41e640d330234ebaee4eceb1523b43b168b8a107765dd1b102c41cd200d3899fa241b87e8473e40b0d49ac9044249d8f74419b7507518041f3d7aad9e2152b0f8f425906095dd601697acd1a70bf3f5f2f64a0d38118e03282f3ae2a9ab8c9cc695c9f64a8cc722703e6e6805e21245b11f8f26228b91e66bd1b6f8d3ded0181491370dad82bdd46863138d11c8c6e4c70811bbb0afa15a450570fba043e2aa477441cf006111f916f0f80445a7ce1780af01a2b8688c4f70a758f6e7579d5d3cf9ddcc6a1dc3a83744c3ceb40f10fb072cb04940867ea5d2e7d7373bc2201d1c30a976745440597f87dd867d870c146ef3d4277dea046a21e2c758895343dde22f37061758a16095030c3f2664f9abb1f771ac28e2f55925974c7771f54557e447ebb7bee6449d22e52053925b248b05ba706590eedf6e24c1ea9f3685b83fd21e20dc9a8fdd87bb65266ddf72d99eaca5f7786afca9b98817f3c1a32ff87f776475024dd53cdbabc996921be1a50d5478a6f92cbd1f05885dce23af78eb58979c608fc64d3adf796861c673610fd9bf47793893da8bfcc7d0c9217244cb8768e699c45fb85d0658640db520170b1a420b72d890b4d056ef168bba17bd957af12f5239e8ae0687848c2e630234b4b46f680c1bce2cbd9711dabba8425ab03056c3a5f9592d7745499784fd25ade98ca511819ce01db178db801b75528f8dddb4aaf68cfbd76889f8720f774514aff1ef12734bf07f573b716d746e1ac572d62c788de740b599cfd6705a91db8c2d0974f2fafa47072dc231e1634008624e648489d915542f3bf2343b56b8b41482638b9cff93a60fd1d221550bfe947e4fafc8f7666803db2210081228e94e2e143133f3b851c8a2f5524e0c612da970f01576fd2f2c704bb10d79e52c7b75d8ca01c7a7f1aae45e43de5b208a64c4006038a8cb</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">要密码，快滚.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>Diary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>随笔</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第一份垃圾</title>
    <link href="/2022/04/30/%E6%97%A5%E8%AE%B0/%E7%AC%AC%E4%B8%80%E4%BB%BD%E5%9E%83%E5%9C%BE/"/>
    <url>/2022/04/30/%E6%97%A5%E8%AE%B0/%E7%AC%AC%E4%B8%80%E4%BB%BD%E5%9E%83%E5%9C%BE/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="速爬." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="0cc6f18647c90eaffc655ef79d6d14a73a96a65fbb1f8c69057cfe4407298c2c">a03af1012de36d86e65bfb0d51f6ff10df1af71bbf259b402bf5a10ac87725cf2470c5065823ee176ac22da8c68a8b1431e252bca0951342a22f2949ebb87630c7bc9b0c2da7bbc4cd91977e82dc8a6346832e3817b281a2254521f22f56cdfe51042756cc570957ef6024f620ad183de679f8c9d494fad796c009fe29be6e2ffc6df0efeb88581b71b0bed8703128dcc6d365ab0281d0aaf64ea08cb16a397166804f3ec587160cd5292c9c917487dc1f45e42e5a67a1c60f19723458e48f0c2b49269651b101704db21398b6e16fedeae20283e6f07266cd4775f788abda37920db71e69d65567cf53d86e4df49eb24bbb45ccd60fc21b901baf372ebe2ff174ac19773ed173112fff6f7048dd83ba5caa2b17bd37916c01260acaca5c6a3ebc1c015cf78403b221cb5291175b35d1704d6eb4700b1f1de865394021c6a8408820845c2f918d96792db2b4c2bcfa2e602df094c8f83fa6b0b9c8f526964dbdb156dfcb2fecd94d91e897d71908f53aadf754c2db8be4b2bd691787adbab4e76e9022ffffed1ce96994deaf4da62e664b03ffceba5583ccb5d5f7f8b0a75e9595338c05203ca2a0399ccfc77f8449e8ec2b531db3fcbef644f502fd9ea9fb50c7e04159884e4ed434f61680694c3dec697be6f0a4236bfd438184d190ae3c1547e4bf27c54e534be051ca3fef51d1b293e7cee5a351f890817d1f642fa79f81acc3d49fcf268edafdbd7c0599664b34dfd2f8899ddaf6fda6d4dab799a0a4a72bf590d1d384c4ca6e1eb638a4ed550ac1faefb176531e59b3f68a3f59232b582a83506b7c066172941d592c58594db4ead7f76b60c7a65c976953703b214061cf197920f41752617dfefa0c58c82f16079f1a53db802c8e8e99e8c2ffe2a7f6113ad6651b2238460e5de3309e75ec2ca6c5482cb69bf9149f09566581018d69a6c8738ec82f460c306b9419bfd7199c9fdd4bd137fdc0f5c202c4fd2d93a321c33aed310a484395f929a047110ac413103caeb578c3def702cd4210bf6d1517ec6870030016e8805c27099786c479eaef6f508a173d2799313c90b4af1910267e0db9b996d35a7df86d7f5be145294371cae156415743688729c39cb4c495abd645d48e58c90be7d0c193072e53f84857981e451ff686340c611e44be7a623e157142e3f962599336e45a730b11be7425ef3ceef4cfc8717ee4c4d3a4a17bfa0c8b184e32ad0e773443c2daf4a686ea8a218d47f3bc43d50270ffd9adbf52a7163238d098496c906ae087e7efc275f6611f3500609cf8075107d975d132f5b68188803521e29cdde4b1d43cb44a4a38b9227dffcede1991ccec60169d65d2f24092a7d585b5e429c9b76954eaea72bd2166133a0e04f4afe73740490f5c38bf28ffd7e844a50b0994d1c4e02d0bc858cc74ff6dcd526017b3b70cd96bafdb4ff6faef5d832aeb25086471b9149bc5d25878cdbe4b81b5d3e2b71b0e90b175f1d4072c1e8083c9992e2418cae7ac48d275f165ae0f29b86030aa72bcad0d7cdae8cd57e18afbd0551e18e6482fd41f519837c497030c8fef44791e535c89ad3a4b6b61eaf8eb0bc8b63a49549efb3a0ee11dae5ddd4588dd1f93d42350179d58a98017b85a3179ec03d56d5e6a3af905494f0b5a632bae9458833262c7347f5000d6b3c6dccfb1a3eac12592e96cab77afe7c2407dac53b8b8cf51ce4bac83622bbec7b9c91e13753f8fab6bd1eae128964fc4618bc096cf453f16281c76c7eabf822018b30671f66d2e1f6e571dcbaf326b3a64dcbd873c8231a5b327ad2b75849255ef9f958eb102ceee585fbb4374</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">要密码，快滚.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>Diary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>随笔</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
